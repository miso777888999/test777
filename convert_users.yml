---
- name: Installing platform
  hosts: rockstat
  become: yes
  vars_files:
    - vars/config.yml
  vars:
    _nginx_users: {}
    _nginx_admin: {}
  tasks:
    - block:
      - command: 'cat /srv/platform/bootstrap/files/users.yml'
        register: users_out
        failed_when: 'False'
      - block:
        - debug: var=pb_users
        - debug: var=users_data
        - debug: msg="loc_gen:{{loc_gen}}"
        - debug: msg="loc_conf:{{loc_conf}}"
        - debug: msg="loc_admpwd:{{loc_admpwd}}"
        - debug: msg="pb_woadmin:{{pb_notadmin}}"
        - debug: msg="pb_admin:{{pb_admin}}"
        - debug: var=loc_users_raw
        - debug: var=loc_users_xx
        - debug: msg="loc_users:{{loc_users}}"
        - set_fact:
            _nginx_users: "{{ _nginx_users | combine({row.0: row.0+':'+row.1}) }}"
          vars:
            row: "{{item.split(':')}}"
          loop: "{{users_list|flatten}}"
        - set_fact:
            _nginx_admin: "{{ _nginx_admin | combine({row.0: row.1}) }}"
          vars:
            row: "{{item.split(':')}}"
          loop: "{{admin_list|flatten}}"
        - file:
            path: /etc/ansible/facts.d
            state: directory
        - template:
            src: 'facts.d/config.fact.j2'
            dest: /etc/ansible/facts.d/config.fact
          vars:
            _facts_dict: "{{ loc_gen|combine({'admin_password': (_nginx_admin.values()|list)[0]})}}"
        vars:
          users_data: "{{ (users_out.rc == 0) | ternary(users_out.stdout|from_yaml, {}) }}"
          pb_users: "{{ users_data.iternal_users | default(users_data.users|default([])) }}"
          loc_conf: "{{ ansible_local.config | default({}) }}"
          loc_gen: "{{ loc_conf.general | default({}) }}"
          loc_admpwd: "{{ loc_gen.admin_password | default('') }}"
          loc_adm: "{{ (loc_admpwd != '')|ternary(['admin:'+loc_admpwd], []) }}"
          init_adm: "{{ ['admin:'+init_admin_pass|apr1pass] if init_admin_pass is defined else [] }}"
          loc_users_raw: "{{ loc_gen.users|default('') }}"
          loc_users: "{{ (loc_users_raw == '')|ternary(' [] ', loc_users_raw)|from_json }}"
          pb_notadmin: "{{ pb_users | select('match', '^(?!admin).*$') | list }}"
          pb_admin: "{{ pb_users | select('match', '^admin.*$') | list }}"
          users_list:
            - "{{loc_users}}"
            - "{{pb_notadmin}}"
          admin_list:
            - "{{init_adm}}"
            - "{{ 'admin:'+((users_list|flatten)[0].split(':'))[1] }}"
            - "{{pb_admin}}"
            - "{{loc_adm}}"          

      # when: "http_users|length > 0"
      
    